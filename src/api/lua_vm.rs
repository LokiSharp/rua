pub trait LuaVM: super::lua_state::LuaState {
    /// 获取当前的程序计数器（pc）的值。程序计数器用于跟踪虚拟机当前正在执行的指令。
    ///
    /// 返回值：当前的程序计数器值。
    fn pc(&self) -> isize;

    /// 将程序计数器（pc）增加指定的值。这个函数用于改变虚拟机下一条要执行的指令。
    ///
    /// 参数：
    /// * `n` - 要增加的值。
    fn add_pc(&mut self, n: isize);

    /// 获取当前程序计数器（pc）指向的指令，并将计数器指向下一条指。这个函数用于获取并执行下一条指令。
    ///
    /// 返回值：当前程序计数器指向的指令。
    fn fetch(&mut self) -> u32;

    /// 获取指定索引的常量，并将其推送到栈顶。这个函数用于读取常量表中的值。
    ///
    /// 参数：
    /// * `idx` - 常量的索引。
    fn get_const(&mut self, idx: isize);

    /// 获取指定的 RK 值，并将其推送到栈顶。
    ///
    /// 参数：
    /// * `rk` - RK 值。
    fn get_rk(&mut self, rk: isize);

    /// 从当前栈的闭包中加载指定索引的原型，并将其封装为一个新的闭包，然后将这个闭包推送到栈顶。这个函数用于创建新的闭包。
    ///
    /// 参数：
    /// * `idx` - 原型的索引。
    fn load_proto(&mut self, idx: usize);

    /// 加载变长参数（vararg）到栈上。这个函数用于处理变长参数的加载。
    ///
    /// 参数：
    /// * `n` - 要加载的变长参数的数量。
    fn load_vararg(&mut self, n: isize);

    /// 返回当前栈的闭包需要的寄存器数量。这个函数用于确定当前闭包需要多少寄存器来存储其局部变量和临时值。
    ///
    /// 返回值：当前闭包需要的寄存器数量。
    fn register_count(&self) -> usize;
}
