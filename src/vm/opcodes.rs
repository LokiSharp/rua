#[allow(dead_code)]
#[derive(Clone, Copy, Debug)]
pub enum OpMode {
    IABC,
    IABx,
    IAsBx,
    IAx,
    IsJ,
}

#[allow(dead_code)]
impl OpMode {
    pub fn from_u8(value: u8) -> OpMode {
        match value {
            0 => OpMode::IABC,
            1 => OpMode::IABx,
            2 => OpMode::IAsBx,
            3 => OpMode::IAx,
            4 => OpMode::IsJ,
            _ => panic!("Invalid OpMode value: {}", value),
        }
    }
}

pub const OPCODES: &'static [OpCode] = &[
    opcode(0, 0, 0, 0, 1, OpMode::IABC, "OP_MOVE"),
    opcode(0, 0, 0, 0, 1, OpMode::IAsBx, "OP_LOADI"),
    opcode(0, 0, 0, 0, 1, OpMode::IAsBx, "OP_LOADF"),
    opcode(0, 0, 0, 0, 1, OpMode::IABx, "OP_LOADK"),
    opcode(0, 0, 0, 0, 1, OpMode::IABx, "OP_LOADKX"),
    opcode(0, 0, 0, 0, 1, OpMode::IABC, "OP_LOADFALSE"),
    opcode(0, 0, 0, 0, 1, OpMode::IABC, "OP_LFALSESKIP"),
    opcode(0, 0, 0, 0, 1, OpMode::IABC, "OP_LOADTRUE"),
    opcode(0, 0, 0, 0, 1, OpMode::IABC, "OP_LOADNIL"),
    opcode(0, 0, 0, 0, 1, OpMode::IABC, "OP_GETUPVAL"),
    opcode(0, 0, 0, 0, 0, OpMode::IABC, "OP_SETUPVAL"),
    opcode(0, 0, 0, 0, 1, OpMode::IABC, "OP_GETTABUP"),
    opcode(0, 0, 0, 0, 1, OpMode::IABC, "OP_GETTABLE"),
    opcode(0, 0, 0, 0, 1, OpMode::IABC, "OP_GETI"),
    opcode(0, 0, 0, 0, 1, OpMode::IABC, "OP_GETFIELD"),
    opcode(0, 0, 0, 0, 0, OpMode::IABC, "OP_SETTABUP"),
    opcode(0, 0, 0, 0, 0, OpMode::IABC, "OP_SETTABLE"),
    opcode(0, 0, 0, 0, 0, OpMode::IABC, "OP_SETI"),
    opcode(0, 0, 0, 0, 0, OpMode::IABC, "OP_SETFIELD"),
    opcode(0, 0, 0, 0, 1, OpMode::IABC, "OP_NEWTABLE"),
    opcode(0, 0, 0, 0, 1, OpMode::IABC, "OP_SELF"),
    opcode(0, 0, 0, 0, 1, OpMode::IABC, "OP_ADDI"),
    opcode(0, 0, 0, 0, 1, OpMode::IABC, "OP_ADDK"),
    opcode(0, 0, 0, 0, 1, OpMode::IABC, "OP_SUBK"),
    opcode(0, 0, 0, 0, 1, OpMode::IABC, "OP_MULK"),
    opcode(0, 0, 0, 0, 1, OpMode::IABC, "OP_MODK"),
    opcode(0, 0, 0, 0, 1, OpMode::IABC, "OP_POWK"),
    opcode(0, 0, 0, 0, 1, OpMode::IABC, "OP_DIVK"),
    opcode(0, 0, 0, 0, 1, OpMode::IABC, "OP_IDIVK"),
    opcode(0, 0, 0, 0, 1, OpMode::IABC, "OP_BANDK"),
    opcode(0, 0, 0, 0, 1, OpMode::IABC, "OP_BORK"),
    opcode(0, 0, 0, 0, 1, OpMode::IABC, "OP_BXORK"),
    opcode(0, 0, 0, 0, 1, OpMode::IABC, "OP_SHRI"),
    opcode(0, 0, 0, 0, 1, OpMode::IABC, "OP_SHLI"),
    opcode(0, 0, 0, 0, 1, OpMode::IABC, "OP_ADD"),
    opcode(0, 0, 0, 0, 1, OpMode::IABC, "OP_SUB"),
    opcode(0, 0, 0, 0, 1, OpMode::IABC, "OP_MUL"),
    opcode(0, 0, 0, 0, 1, OpMode::IABC, "OP_MOD"),
    opcode(0, 0, 0, 0, 1, OpMode::IABC, "OP_POW"),
    opcode(0, 0, 0, 0, 1, OpMode::IABC, "OP_DIV"),
    opcode(0, 0, 0, 0, 1, OpMode::IABC, "OP_IDIV"),
    opcode(0, 0, 0, 0, 1, OpMode::IABC, "OP_BAND"),
    opcode(0, 0, 0, 0, 1, OpMode::IABC, "OP_BOR"),
    opcode(0, 0, 0, 0, 1, OpMode::IABC, "OP_BXOR"),
    opcode(0, 0, 0, 0, 1, OpMode::IABC, "OP_SHL"),
    opcode(0, 0, 0, 0, 1, OpMode::IABC, "OP_SHR"),
    opcode(1, 0, 0, 0, 0, OpMode::IABC, "OP_MMBIN"),
    opcode(1, 0, 0, 0, 0, OpMode::IABC, "OP_MMBINI"),
    opcode(1, 0, 0, 0, 0, OpMode::IABC, "OP_MMBINK"),
    opcode(0, 0, 0, 0, 1, OpMode::IABC, "OP_UNM"),
    opcode(0, 0, 0, 0, 1, OpMode::IABC, "OP_BNOT"),
    opcode(0, 0, 0, 0, 1, OpMode::IABC, "OP_NOT"),
    opcode(0, 0, 0, 0, 1, OpMode::IABC, "OP_LEN"),
    opcode(0, 0, 0, 0, 1, OpMode::IABC, "OP_CONCAT"),
    opcode(0, 0, 0, 0, 0, OpMode::IABC, "OP_CLOSE"),
    opcode(0, 0, 0, 0, 0, OpMode::IABC, "OP_TBC"),
    opcode(0, 0, 0, 0, 0, OpMode::IsJ, "OP_JMP"),
    opcode(0, 0, 0, 1, 0, OpMode::IABC, "OP_EQ"),
    opcode(0, 0, 0, 1, 0, OpMode::IABC, "OP_LT"),
    opcode(0, 0, 0, 1, 0, OpMode::IABC, "OP_LE"),
    opcode(0, 0, 0, 1, 0, OpMode::IABC, "OP_EQK"),
    opcode(0, 0, 0, 1, 0, OpMode::IABC, "OP_EQI"),
    opcode(0, 0, 0, 1, 0, OpMode::IABC, "OP_LTI"),
    opcode(0, 0, 0, 1, 0, OpMode::IABC, "OP_LEI"),
    opcode(0, 0, 0, 1, 0, OpMode::IABC, "OP_GTI"),
    opcode(0, 0, 0, 1, 0, OpMode::IABC, "OP_GEI"),
    opcode(0, 0, 0, 1, 0, OpMode::IABC, "OP_TEST"),
    opcode(0, 0, 0, 1, 1, OpMode::IABC, "OP_TESTSET"),
    opcode(0, 1, 1, 0, 1, OpMode::IABC, "OP_CALL"),
    opcode(0, 1, 1, 0, 1, OpMode::IABC, "OP_TAILCALL"),
    opcode(0, 0, 1, 0, 0, OpMode::IABC, "OP_RETURN"),
    opcode(0, 0, 0, 0, 0, OpMode::IABC, "OP_RETURN0"),
    opcode(0, 0, 0, 0, 0, OpMode::IABC, "OP_RETURN1"),
    opcode(0, 0, 0, 0, 1, OpMode::IABx, "OP_FORLOOP"),
    opcode(0, 0, 0, 0, 1, OpMode::IABx, "OP_FORPREP"),
    opcode(0, 0, 0, 0, 0, OpMode::IABx, "OP_TFORPREP"),
    opcode(0, 0, 0, 0, 0, OpMode::IABC, "OP_TFORCALL"),
    opcode(0, 0, 0, 0, 1, OpMode::IABx, "OP_TFORLOOP"),
    opcode(0, 0, 1, 0, 0, OpMode::IABC, "OP_SETLIST"),
    opcode(0, 0, 0, 0, 1, OpMode::IABx, "OP_CLOSURE"),
    opcode(0, 1, 0, 0, 1, OpMode::IABC, "OP_VARARG"),
    opcode(0, 0, 1, 0, 1, OpMode::IABC, "OP_VARARGPREP"),
    opcode(0, 0, 0, 0, 0, OpMode::IAx, "OP_EXTRAARG"),
];

const fn opcode(
    mm: u8,
    ot: u8,
    it: u8,
    t: u8,
    a: u8,
    opmode: OpMode,
    name: &'static str,
) -> OpCode {
    OpCode {
        mm,
        ot,
        it,
        t,
        a,
        opmode,
        name,
    }
}

#[derive(Clone, Copy, Debug)]
pub struct OpCode {
    pub mm: u8,
    pub ot: u8,
    pub it: u8,
    pub t: u8,
    pub a: u8,
    pub opmode: OpMode,
    pub name: &'static str,
}
